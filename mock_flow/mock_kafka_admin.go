// Code generated by MockGen. DO NOT EDIT.
// Source: flow/kafka_admin.go

// Package mock_flow is a generated GoMock package.
package mock_flow

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKafkaAdmin is a mock of KafkaAdmin interface
type MockKafkaAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAdminMockRecorder
}

// MockKafkaAdminMockRecorder is the mock recorder for MockKafkaAdmin
type MockKafkaAdminMockRecorder struct {
	mock *MockKafkaAdmin
}

// NewMockKafkaAdmin creates a new mock instance
func NewMockKafkaAdmin(ctrl *gomock.Controller) *MockKafkaAdmin {
	mock := &MockKafkaAdmin{ctrl: ctrl}
	mock.recorder = &MockKafkaAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKafkaAdmin) EXPECT() *MockKafkaAdminMockRecorder {
	return m.recorder
}

// RefreshTopics mocks base method
func (m *MockKafkaAdmin) RefreshTopics() error {
	ret := m.ctrl.Call(m, "RefreshTopics")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshTopics indicates an expected call of RefreshTopics
func (mr *MockKafkaAdminMockRecorder) RefreshTopics() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTopics", reflect.TypeOf((*MockKafkaAdmin)(nil).RefreshTopics))
}

// SetTopics mocks base method
func (m *MockKafkaAdmin) SetTopics(arg0 []string) {
	m.ctrl.Call(m, "SetTopics", arg0)
}

// SetTopics indicates an expected call of SetTopics
func (mr *MockKafkaAdminMockRecorder) SetTopics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTopics", reflect.TypeOf((*MockKafkaAdmin)(nil).SetTopics), arg0)
}

// Topics mocks base method
func (m *MockKafkaAdmin) Topics() []string {
	ret := m.ctrl.Call(m, "Topics")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Topics indicates an expected call of Topics
func (mr *MockKafkaAdminMockRecorder) Topics() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topics", reflect.TypeOf((*MockKafkaAdmin)(nil).Topics))
}

// TopicsWithSuffix mocks base method
func (m *MockKafkaAdmin) TopicsWithSuffix(suffix string) []string {
	ret := m.ctrl.Call(m, "TopicsWithSuffix", suffix)
	ret0, _ := ret[0].([]string)
	return ret0
}

// TopicsWithSuffix indicates an expected call of TopicsWithSuffix
func (mr *MockKafkaAdminMockRecorder) TopicsWithSuffix(suffix interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicsWithSuffix", reflect.TypeOf((*MockKafkaAdmin)(nil).TopicsWithSuffix), suffix)
}

// Exist mocks base method
func (m *MockKafkaAdmin) Exist(topic string) bool {
	ret := m.ctrl.Call(m, "Exist", topic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist
func (mr *MockKafkaAdminMockRecorder) Exist(topic interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockKafkaAdmin)(nil).Exist), topic)
}

// CreateTopic mocks base method
func (m *MockKafkaAdmin) CreateTopic(topic string, numPartitions int32, replicationFactor int16) error {
	ret := m.ctrl.Call(m, "CreateTopic", topic, numPartitions, replicationFactor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockKafkaAdminMockRecorder) CreateTopic(topic, numPartitions, replicationFactor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockKafkaAdmin)(nil).CreateTopic), topic, numPartitions, replicationFactor)
}

// CreateTopicIfNotExist mocks base method
func (m *MockKafkaAdmin) CreateTopicIfNotExist(topic string, numPartitions int32, replicationFactor int16) (bool, error) {
	ret := m.ctrl.Call(m, "CreateTopicIfNotExist", topic, numPartitions, replicationFactor)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicIfNotExist indicates an expected call of CreateTopicIfNotExist
func (mr *MockKafkaAdminMockRecorder) CreateTopicIfNotExist(topic, numPartitions, replicationFactor interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicIfNotExist", reflect.TypeOf((*MockKafkaAdmin)(nil).CreateTopicIfNotExist), topic, numPartitions, replicationFactor)
}

// Close mocks base method
func (m *MockKafkaAdmin) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockKafkaAdminMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaAdmin)(nil).Close))
}
