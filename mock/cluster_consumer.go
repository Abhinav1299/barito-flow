// Code generated by MockGen. DO NOT EDIT.
// Source: flow/cluster_consumer.go

// Package mock is a generated GoMock package.
package mock

import (
	sarama "github.com/Shopify/sarama"
	sarama_cluster "github.com/bsm/sarama-cluster"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClusterConsumer is a mock of ClusterConsumer interface
type MockClusterConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterConsumerMockRecorder
}

// MockClusterConsumerMockRecorder is the mock recorder for MockClusterConsumer
type MockClusterConsumerMockRecorder struct {
	mock *MockClusterConsumer
}

// NewMockClusterConsumer creates a new mock instance
func NewMockClusterConsumer(ctrl *gomock.Controller) *MockClusterConsumer {
	mock := &MockClusterConsumer{ctrl: ctrl}
	mock.recorder = &MockClusterConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterConsumer) EXPECT() *MockClusterConsumerMockRecorder {
	return m.recorder
}

// Messages mocks base method
func (m *MockClusterConsumer) Messages() <-chan *sarama.ConsumerMessage {
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(<-chan *sarama.ConsumerMessage)
	return ret0
}

// Messages indicates an expected call of Messages
func (mr *MockClusterConsumerMockRecorder) Messages() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockClusterConsumer)(nil).Messages))
}

// Notifications mocks base method
func (m *MockClusterConsumer) Notifications() <-chan *sarama_cluster.Notification {
	ret := m.ctrl.Call(m, "Notifications")
	ret0, _ := ret[0].(<-chan *sarama_cluster.Notification)
	return ret0
}

// Notifications indicates an expected call of Notifications
func (mr *MockClusterConsumerMockRecorder) Notifications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notifications", reflect.TypeOf((*MockClusterConsumer)(nil).Notifications))
}

// Errors mocks base method
func (m *MockClusterConsumer) Errors() <-chan error {
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockClusterConsumerMockRecorder) Errors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockClusterConsumer)(nil).Errors))
}

// MarkOffset mocks base method
func (m *MockClusterConsumer) MarkOffset(msg *sarama.ConsumerMessage, metadata string) {
	m.ctrl.Call(m, "MarkOffset", msg, metadata)
}

// MarkOffset indicates an expected call of MarkOffset
func (mr *MockClusterConsumerMockRecorder) MarkOffset(msg, metadata interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOffset", reflect.TypeOf((*MockClusterConsumer)(nil).MarkOffset), msg, metadata)
}

// Close mocks base method
func (m *MockClusterConsumer) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClusterConsumerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClusterConsumer)(nil).Close))
}
