// Code generated by MockGen. DO NOT EDIT.
// Source: flow/leaky_bucket.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLeakyBucket is a mock of LeakyBucket interface
type MockLeakyBucket struct {
	ctrl     *gomock.Controller
	recorder *MockLeakyBucketMockRecorder
}

// MockLeakyBucketMockRecorder is the mock recorder for MockLeakyBucket
type MockLeakyBucketMockRecorder struct {
	mock *MockLeakyBucket
}

// NewMockLeakyBucket creates a new mock instance
func NewMockLeakyBucket(ctrl *gomock.Controller) *MockLeakyBucket {
	mock := &MockLeakyBucket{ctrl: ctrl}
	mock.recorder = &MockLeakyBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLeakyBucket) EXPECT() *MockLeakyBucketMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLeakyBucket) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockLeakyBucketMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLeakyBucket)(nil).Close))
}

// StartRefill mocks base method
func (m *MockLeakyBucket) StartRefill() {
	m.ctrl.Call(m, "StartRefill")
}

// StartRefill indicates an expected call of StartRefill
func (mr *MockLeakyBucketMockRecorder) StartRefill() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRefill", reflect.TypeOf((*MockLeakyBucket)(nil).StartRefill))
}

// Take mocks base method
func (m *MockLeakyBucket) Take() bool {
	ret := m.ctrl.Call(m, "Take")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Take indicates an expected call of Take
func (mr *MockLeakyBucketMockRecorder) Take() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockLeakyBucket)(nil).Take))
}

// Token mocks base method
func (m *MockLeakyBucket) Token() int {
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(int)
	return ret0
}

// Token indicates an expected call of Token
func (mr *MockLeakyBucketMockRecorder) Token() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockLeakyBucket)(nil).Token))
}

// Max mocks base method
func (m *MockLeakyBucket) Max() int {
	ret := m.ctrl.Call(m, "Max")
	ret0, _ := ret[0].(int)
	return ret0
}

// Max indicates an expected call of Max
func (mr *MockLeakyBucketMockRecorder) Max() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Max", reflect.TypeOf((*MockLeakyBucket)(nil).Max))
}
